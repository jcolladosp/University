[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Last Style Storage: Default
Scroll Position: 139
Active Line: 176

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.17,Default,,0,0,0,,[ruido]. Hoy vamos a dar algunas indicaciones\Nsobre que son las expresiones regulares
Dialogue: 0,0:00:05.17,0:00:10.34,Default,,0,0,0,,usadas en practica. Voy a mencionar\Nalgunas de las extensiones que se encuentran en
Dialogue: 0,0:00:10.34,0:00:15.39,Default,,0,0,0,,varios comandos de Unix. También hablaré\Nsobre algunos detalles de algoritmos de
Dialogue: 0,0:00:15.39,0:00:20.23,Default,,0,0,0,,pruebas de procesamiento, y centrarse en\Ntares de análisis léxicos importantes. Esa
Dialogue: 0,0:00:20.23,0:00:25.80,Default,,0,0,0,,parte de un compilador que mira al programa\Nentero siendo compilado, y lo rompe en
Dialogue: 0,0:00:25.80,0:00:30.85,Default,,0,0,0,,toquens, que son secuencias de caracteres que lógicamente pertenecen juntas.
Dialogue: 0,0:00:30.85,0:00:35.89,Default,,0,0,0,,Muchos sistemas usan expresiones regulares de algun tipo para describir patrones. A menudo
Dialogue: 0,0:00:35.89,0:00:41.39,Default,,0,0,0,,estos estan incrustados en el codigo propiedad de la compañia pero tambien hay algunos bastante
Dialogue: 0,0:00:41.39,0:00:46.17,Default,,0,0,0,,visibles como el numero de comandos de UNIX. Os voy a contar una
Dialogue: 0,0:00:46.17,0:00:51.48,Default,,0,0,0,,historia particular involucrando software propietario antes de ir a las generalidades
Dialogue: 0,0:00:51.48,0:00:56.72,Default,,0,0,0,,con respecto a procesamiento de texto. Junglee fue una startup fundada por tres
Dialogue: 0,0:00:56.72,0:01:01.88,Default,,0,0,0,,estudiantes míos de PHD y otros dos en 1994. En ese tiempo, la web era muy nueva, y ellos
Dialogue: 0,0:01:01.88,0:01:06.21,Default,,0,0,0,,tuvieron la idea de construir sistemas web integrados en paginas dentro de productos
Dialogue: 0,0:01:06.21,0:01:10.88,Default,,0,0,0,,utiles, y haciendo esto durante dos años fue cuanto consigueron un contrato de
Dialogue: 0,0:01:10.88,0:01:15.80,Default,,0,0,0,,Yahoo para construir un servicio que permitiese a los visitantes de Yahoo buscar libros y obtener
Dialogue: 0,0:01:15.80,0:01:20.54,Default,,0,0,0,,una lista que diese el precio, las tasas de envio y el tiempo de envio en diferentes
Dialogue: 0,0:01:20.54,0:01:25.40,Default,,0,0,0,,vendedores de libros. Inmediatamente tras el despliegue del producto, Amazon compró Junglee
Dialogue: 0,0:01:25.40,0:01:30.02,Default,,0,0,0,,para parar la comparación entre tiendas. Curiosamente, Amazon
Dialogue: 0,0:01:30.02,0:01:34.73,Default,,0,0,0,,no entendió que yo compraba en su web no porque fueran los más baratos, si no
Dialogue: 0,0:01:34.73,0:01:39.05,Default,,0,0,0,,porque estaba seguro de que ellos siempre me enviarian lo que yo buscaba y llegaria
Dialogue: 0,0:01:39.05,0:01:43.37,Default,,0,0,0,,a tiempo. Y aparentemente, no era el unico que lo pensaba. Pero el mundo de la compra online
Dialogue: 0,0:01:43.37,0:01:47.90,Default,,0,0,0,,era nuevo, y Amazon no podia estar seguro del impacto de la comparación automatica
Dialogue: 0,0:01:47.90,0:01:51.73,Default,,0,0,0,,de tiendas. Una hecho interesante fue que a Amazon le salió rentable
Dialogue: 0,0:01:51.73,0:01:55.83,Default,,0,0,0,,Junglee, porque uno de sus fundadores, Anand Rajaraman, mientras estaba en Amazon, fue el
Dialogue: 0,0:01:55.83,0:02:00.21,Default,,0,0,0,,inventor de Mechanical Turk. Pero el primer trabajo pagado que tuvo Junglee fue
Dialogue: 0,0:02:00.21,0:02:04.47,Default,,0,0,0,,un contrato del Washington Post para producir una tabla online de oportunidades
Dialogue: 0,0:02:04.47,0:02:09.53,Default,,0,0,0,,de trabajo ofrecidas por compañias que estaban poniendo anuncios impresos
Dialogue: 0,0:02:09.53,0:02:14.92,Default,,0,0,0,,en The Post. El trabajo no era facil. Jungle tuvo que ir a cientos de
Dialogue: 0,0:02:14.92,0:02:20.07,Default,,0,0,0,,paginas web y extraer la informacion sobre cada trabajo automaticamente. Si lo miras por un lado
Dialogue: 0,0:02:20.07,0:02:24.83,Default,,0,0,0,,te puedes imaginar como hacerlo.Aquellos enlaces que tu sigues desde la pagina principal
Dialogue: 0,0:02:24.83,0:02:29.53,Default,,0,0,0,,para acceder a paginas de empleo. Y que hay alli. Y como navegar el codigo fuente
Dialogue: 0,0:02:29.53,0:02:33.65,Default,,0,0,0,,de un HTML. Para encontrar informacion critica sobre el trabajo como
Dialogue: 0,0:02:33.65,0:02:38.86,Default,,0,0,0,,el titulo y el salario. Pero se necesita hacer esto para cada sitio. Y para empeorar las cosas,
Dialogue: 0,0:02:38.86,0:02:43.52,Default,,0,0,0,,los chicos de Junglee descubrieron que estos sitios evolucionan. Esto es,
Dialogue: 0,0:02:43.52,0:02:48.30,Default,,0,0,0,,que no solo cambien los trabajos, la estructura de la pagina o inculuso la pagina entera
Dialogue: 0,0:02:48.30,0:02:53.39,Default,,0,0,0,,cambió. El resultado fue que aproximadamente una vez a la semana, el lector para un sitio web concreto
Dialogue: 0,0:02:53.39,0:02:58.94,Default,,0,0,0,,se romperia, y tendria que ser rediseñado. Por eso, los chicos de Junglee desarrollaron un lenguaje
Dialogue: 0,0:02:58.94,0:03:03.30,Default,,0,0,0,,de expresiones regulares para describir como navegar una paguna web para extraer
Dialogue: 0,0:03:03.30,0:03:08.11,Default,,0,0,0,,la informacion que ellos necesitaban. Los simbolos de entrada eran los tipicos caracteres como letras,
Dialogue: 0,0:03:08.11,0:03:13.46,Default,,0,0,0,,asi que ellos podian buscar por palabras importantes como salario. Ellos tambien trataban con etiquetas de HTML
Dialogue: 0,0:03:13.46,0:03:19.29,Default,,0,0,0,,como OL. Esto es aquello. Como simbolos de entrada porque ellos daban pistas importantes sobre
Dialogue: 0,0:03:19.29,0:03:25.43,Default,,0,0,0,,la estructura de la pagina. Por ejemplo una pagina deberia decir, enviar las condiciones del salario. Pero esto
Dialogue: 0,0:03:25.43,0:03:31.12,Default,,0,0,0,,no indica el salario para un trabajo en particular. Pero cuando obtienes una lista
Dialogue: 0,0:03:31.12,0:03:36.66,Default,,0,0,0,,de trabajos. Y esto esta indicado en el orden de etiquetas de las listas. Esto es OL. Y
Dialogue: 0,0:03:36.66,0:03:42.80,Default,,0,0,0,,solo despues de esto, significa que el numero que sigue es el salario para un trabajo.
Dialogue: 0,0:03:42.80,0:03:48.80,Default,,0,0,0,,Otro tipo de elementos de entrada importante es un enlace, que indica que es
Dialogue: 0,0:03:48.80,0:03:54.56,Default,,0,0,0,,necesario mover a otra pagina. Una vez este lenguaje de expresiones regulares fue
Dialogue: 0,0:03:54.56,0:03:59.50,Default,,0,0,0,,implementado, fue mas fácil escribir expresiones regulares para encontrar información clave
Dialogue: 0,0:03:59.50,0:04:04.44,Default,,0,0,0,,como el salario. Y para escribir el código para procesar paginas web directamente. Así pues,
Dialogue: 0,0:04:04.44,0:04:09.57,Default,,0,0,0,,hubo un incremento de la productividad cuando añadieron tamaño a su base de datos. Mas aun
Dialogue: 0,0:04:09.57,0:04:14.13,Default,,0,0,0,,cuando el sitio cambio. Fue relativamente facil modificar la expresión
Dialogue: 0,0:04:14.13,0:04:20.47,Default,,0,0,0,,regular para detectar cambios en el sitio. La arquitectura del sistema
Dialogue: 0,0:04:20.47,0:04:26.22,Default,,0,0,0,,desarrollado en Junglee aparece en muchos sitios. El lenguaje de entrada es expresiones regulares
Dialogue: 0,0:04:26.22,0:04:32.12,Default,,0,0,0,,mas acciones que son codigos arbitrarios ejecutados cuando la expresion
Dialogue: 0,0:04:32.12,0:04:38.10,Default,,0,0,0,,regular es reconocida. En este caso, las acciones deben ser cosas como devolver
Dialogue: 0,0:04:38.10,0:04:44.04,Default,,0,0,0,,este entero como salario. La expresion regular es compilada en un DFA, o
Dialogue: 0,0:04:44.04,0:04:49.74,Default,,0,0,0,,a veces en un NFA que es simulado, efectivamente ejecutando la version vaga
Dialogue: 0,0:04:49.74,0:04:56.03,Default,,0,0,0,,de un subespacio construido necesitado. La simulacion de el DFA o NFA ocurre
Dialogue: 0,0:04:56.03,0:05:00.65,Default,,0,0,0,,exactamente como la hemos descrito teoricamente. Cada simbolo de entrada causa
Dialogue: 0,0:05:00.65,0:05:05.39,Default,,0,0,0,,un cambio de estado y nada mas. La magia ocurre cuando un estado de aceptacion es
Dialogue: 0,0:05:05.39,0:05:10.07,Default,,0,0,0,,alcanzado. Entonces la acción asociada es ejecutada y esta acción permite
Dialogue: 0,0:05:10.07,0:05:15.32,Default,,0,0,0,,al procesador de expresiones regulares interactuar con el resto del mundo de una forma
Dialogue: 0,0:05:15.32,0:05:20.18,Default,,0,0,0,,util. Ahora estamos hablando de extensiones de Unix para expresiones regulares.
Dialogue: 0,0:05:20.18,0:05:24.92,Default,,0,0,0,,Hay muchos comandos en Unix que tienen algun tipo de notación de expresion regular
Dialogue: 0,0:05:24.92,0:05:29.20,Default,,0,0,0,,para la introducción del comando. Un ejemplo importante es "grep" que soporta Expresiones Regulares Globales
Dialogue: 0,0:05:29.20,0:05:33.83,Default,,0,0,0,,y Imprimir. La mayoría de lenguajes basados en expresiones regulares, aunque
Dialogue: 0,0:05:33.83,0:05:38.45,Default,,0,0,0,,tienen extensiones al final de su notacion, hemos cubierto de lejos
Dialogue: 0,0:05:38.45,0:05:43.88,Default,,0,0,0,,encontrar un lenguaje regular. También hay algunos comandos que tienen extensiones
Dialogue: 0,0:05:43.88,0:05:48.32,Default,,0,0,0,,adicionales, que permite a expresiones no regulares ser reconocidas, pero no vamos
Dialogue: 0,0:05:48.32,0:05:52.64,Default,,0,0,0,,a introducirnos en esas caracteristcas. No es coincidencia que
Dialogue: 0,0:05:52.64,0:05:57.73,Default,,0,0,0,,las expresiones esten tan presentes en los comandos del Unix original. Antes de que se hiciese Unix,
Dialogue: 0,0:05:57.73,0:06:02.69,Default,,0,0,0,,Ken Thompson estuvo trabajando en un sistema para procesar expresiones regulares
Dialogue: 0,0:06:02.69,0:06:07.59,Default,,0,0,0,,convirtiendolas en un NFA y simulando el NFA en codigo.
Dialogue: 0,0:06:07.59,0:06:12.43,Default,,0,0,0,,Ahora vamos a conocer algunas expresiones regulares de Unix.
Dialogue: 0,0:06:12.43,0:06:17.58,Default,,0,0,0,,Tu puedes poner parentesis en cualquier lista de caracteres como una clave para algunos caracteres
Dialogue: 0,0:06:17.58,0:06:25.42,Default,,0,0,0,,conectados por el signo de suma en la notación que hemos usado hasta ahora. Tambien puedes describir
Dialogue: 0,0:06:25.42,0:06:32.26,Default,,0,0,0,,una secuencia de simbolos que estan consecutivos en el orden ASCII como caracteres
Dialogue: 0,0:06:32.26,0:06:38.53,Default,,0,0,0,,dando el primer caracter, un guión y luego el ultimo caracter. Por ejemplo [a-z], esto
Dialogue: 0,0:06:38.53,0:06:44.41,Default,,0,0,0,,representa cualquier letra porque las letras minusculas tienen
Dialogue: 0,0:06:44.41,0:06:50.29,Default,,0,0,0,,codigos consecutivos es ASCII. Puedes representar cualquier letra poniendo guiones
Dialogue: 0,0:06:50.29,0:06:58.97,Default,,0,0,0,,entre la letra minuscula a y la z, y lo mismo para las mayusculas. Vale. Daros cuenta que
Dialogue: 0,0:06:58.97,0:07:03.75,Default,,0,0,0,,las letras mayusculas y las minusculas no estan consecutivas en ASCII, entonces tu no puedes
Dialogue: 0,0:07:03.75,0:07:09.50,Default,,0,0,0,,representar estos 52 caracteres con un solo rango. De paso, como hemos visto,
Dialogue: 0,0:07:09.50,0:07:16.31,Default,,0,0,0,,como corchetes y guiones tienen necesidades especiales, significados en expresiones regulares de Unix.
Dialogue: 0,0:07:16.31,0:07:22.79,Default,,0,0,0,,Entonces si quieres usar uno de estos caracteres solo por si mismo, necesitas escribirlo precedido de
Dialogue: 0,0:07:22.79,0:07:29.10,Default,,0,0,0,,un \. Por ejemplo \[ es el corchete en si.
Dialogue: 0,0:07:29.10,0:07:36.49,Default,,0,0,0,,Si no, seria un corchete para expresar rangos. Y el caracter punto
Dialogue: 0,0:07:36.49,0:07:45.03,Default,,0,0,0,,o periodo es un atajo para cualquier caracter. Aqui teneis algunos cambios de Unix para
Dialogue: 0,0:07:45.03,0:07:50.93,Default,,0,0,0,,la notacion de las expresiones regulares que hemos aprendido. Vale, el operador de union es realmente
Dialogue: 0,0:07:50.93,0:07:58.54,Default,,0,0,0,,representado por la barra vertical | . Pero el simbolo de suma es otro
Dialogue: 0,0:07:58.54,0:08:06.39,Default,,0,0,0,,operador como el asterisco, y significa uno o mas. Esto es, en notacion de Unix,
Dialogue: 0,0:08:06.39,0:08:13.73,Default,,0,0,0,,E+, que es, un atajo para E concatenado con E*. Asi que por ejemplo,{\i1}{\i}
Dialogue: 0,0:08:14.03,0:08:22.88,Default,,0,0,0,,[a-z]+ significa una o mas letras en minuscula. El operador de interrogacion
Dialogue: 0,0:08:22.88,0:08:30.81,Default,,0,0,0,,tambien se usa como asterisco pero significa cero o mas. El E? es un atajo para E mas
Dialogue: 0,0:08:30.81,0:08:39.42,Default,,0,0,0,,epsilon. Asi que por ejemplo, [AB]? significa opcionalmente una A o una B. Nosotros escribiriamos en nuestra
Dialogue: 0,0:08:39.42,0:08:46.47,Default,,0,0,0,,notacion original como A + B epsilon. Debeis recordar nuestro ejemplo de DFA
Dialogue: 0,0:08:46.47,0:08:51.91,Default,,0,0,0,,para reconocer string que acaban en ing. Esto llevaba mucha explicacion porque hemos
Dialogue: 0,0:08:51.91,0:08:57.22,Default,,0,0,0,,considerado donde ir desde cada estado que representa algo de progreso
Dialogue: 0,0:08:57.22,0:09:02.45,Default,,0,0,0,,hasta encontrar ing. Aun así, hay una expresion regular para el mismo
Dialogue: 0,0:09:02.45,0:09:08.36,Default,,0,0,0,,lenguage usando el punto de Unix,{\i1}es solo ·ing, asi. O incluso si nosotros{\i}
Dialogue: 0,0:09:08.36,0:09:13.73,Default,,0,0,0,,no tenemos el punto en nuestra notacion, podemos simplemente remplazarlo por un simbolo de entrada
Dialogue: 0,0:09:13.73,0:09:20.59,Default,,0,0,0,,legal conectado por +. De hecho, es mucho mas facil diseñar un NFA para este
Dialogue: 0,0:09:20.59,0:09:26.53,Default,,0,0,0,,lenguaje porque es diseñar un DFA. Vale, aqui hay un NFA. Esencialmente, escoge
Dialogue: 0,0:09:26.53,0:09:32.70,Default,,0,0,0,,cuando el ha visto la "i" del "ing" final. Asi pues, incluso una entrada como
Dialogue: 0,0:09:32.70,0:09:38.57,Default,,0,0,0,,la primera "i" en "skiing", puede permanecer en el estado inicial. Esto es, puede ir desde
Dialogue: 0,0:09:38.57,0:09:44.82,Default,,0,0,0,,el estado inicial a si mismo con la "i" si el quiere. Y de hecho, siempre lo hace, porque
Dialogue: 0,0:09:44.82,0:09:52.67,Default,,0,0,0,,en el NFA siempre lo hace todo. Vale, puede ir, puede permanecer en el inicial
Dialogue: 0,0:09:52.67,0:09:59.23,Default,,0,0,0,,en la pimera "i" y entonces solo viajar a la derecha que es donde esta la segunda "i"
Dialogue: 0,0:09:59.23,0:10:05.95,Default,,0,0,0,,No hay necesidad de preocuparse sobre lo que hacer en un estado como el que representa la "i"
Dialogue: 0,0:10:05.95,0:10:12.42,Default,,0,0,0,,hasta que descubrimos que la "i" y la "n" donde vayamos si la siguiente entrada no es una "g" no importa
Dialogue: 0,0:10:12.42,0:10:19.78,Default,,0,0,0,,porque seguimos estando aqui. Y otra secuencia de estados nos daria
Dialogue: 0,0:10:19.78,0:10:25.84,Default,,0,0,0,,donde realmente necesitamos ir. Ahora vamos a hablar un poco sobre analisis lexico,
Dialogue: 0,0:10:25.84,0:10:30.94,Default,,0,0,0,,la separación de un programa de entrada en unidades basicas llamadas tokens. Por ejemplo,
Dialogue: 0,0:10:30.94,0:10:36.64,Default,,0,0,0,,cada identificador en el programa es un token. Igualmente las palabras reservadas como si o porque
Dialogue: 0,0:10:36.64,0:10:41.65,Default,,0,0,0,,son tokens. Muchos caracteres solos son tokens. Normalmente
Dialogue: 0,0:10:41.65,0:10:47.59,Default,,0,0,0,,en lenguajes de programacion el punto y coma es un token usado para separar lineas, mas es un
Dialogue: 0,0:10:47.59,0:10:53.47,Default,,0,0,0,,token que indica suma, menos que es un token que indica el comparador menos que
Dialogue: 0,0:10:53.47,0:10:59.05,Default,,0,0,0,,Tambien hay operadores multicaracter como el menos que
Dialogue: 0,0:10:59.05,0:11:05.56,Default,,0,0,0,,o simbolo = que juntos significan menos o igual. Hay
Dialogue: 0,0:11:05.56,0:11:10.46,Default,,0,0,0,,herramientas, como Lex, o su versión de codigo libre Flex, que permiten escribir
Dialogue: 0,0:11:10.46,0:11:16.32,Default,,0,0,0,,expresiones regulares para cada token. Tambien puedes proporcionar una parte de código como una accion para
Dialogue: 0,0:11:16.32,0:11:21.29,Default,,0,0,0,,ser ejecutada, cuando una instancia de una expresión regular es reconocida. Por ejemplo, el
Dialogue: 0,0:11:21.29,0:11:28.14,Default,,0,0,0,,codigo para cuando un entero es encontrado debe ser devuelto como entero. Como ejemplo,
Dialogue: 0,0:11:28.14,0:11:36.35,Default,,0,0,0,,la expresion para identificadores deberia ser la mostrada aqui. Esto es. Usando la
Dialogue: 0,0:11:36.35,0:11:43.39,Default,,0,0,0,,notacion de Unix, esta expresión describe identificadores como cualquier letra, esto es,
Dialogue: 0,0:11:43.39,0:11:50.42,Default,,0,0,0,,seguido por un cero o mas letras estrella o digitos. En muchos lenguajes los identificadores
Dialogue: 0,0:11:50.42,0:11:57.10,Default,,0,0,0,,permiten alguna opcion mas, por ejemplo, barra baja deberia ser incluida como si fuere
Dialogue: 0,0:11:57.10,0:12:04.09,Default,,0,0,0,,otro digito asi que apareceria en esta lista de aqui. Vale, barrabaja. En Lex
Dialogue: 0,0:12:04.09,0:12:09.62,Default,,0,0,0,,tu escribes una accción la cual es un codigo arbitrario a ser ejecutado cuando la expresion
Dialogue: 0,0:12:09.62,0:12:15.09,Default,,0,0,0,,regular para un token es emparejada. En los casos más simples, todo este codigo devuelve
Dialogue: 0,0:12:15.09,0:12:20.70,Default,,0,0,0,,un codigo en forma de entero representado el token encontrado. Pero la accion debe ser
Dialogue: 0,0:12:20.70,0:12:25.75,Default,,0,0,0,,mucho mas compliado. Por ejemplo, si un identificador es encontrado, la accion deberia
Dialogue: 0,0:12:25.75,0:12:31.57,Default,,0,0,0,,ocasionar instalar ese identificador en la tabla de simbolos donde todos los identificadores usados
Dialogue: 0,0:12:31.57,0:12:36.75,Default,,0,0,0,,por el programa son almacenados. Cuando construimos un analizador léxico usando expresiones
Dialogue: 0,0:12:36.75,0:12:43.45,Default,,0,0,0,,regulares para los tokens hay algunas resoluciones y ambiguedades que necesitan ser 
Dialogue: 0,0:12:43.45,0:12:50.00,Default,,0,0,0,,enfrentadas. Vamos a mostrar dos ejemplos. Para uno. Reservar palabras como "si" tambien empareja
Dialogue: 0,0:12:50.00,0:12:56.02,Default,,0,0,0,,la expresion para identificadores. Pero "si" no es un identificador legal. Asi que tenemos que
Dialogue: 0,0:12:56.02,0:13:02.04,Default,,0,0,0,,asegurarnos que el analizador lexico haga lo correcto en "si". Vale. Para otro
Dialogue: 0,0:13:02.04,0:13:06.76,Default,,0,0,0,,cuando nosotros vemos menos que. Nosotros no sabemos inmediatamente si es un token en si mismo
Dialogue: 0,0:13:06.76,0:13:12.06,Default,,0,0,0,,o una parte de un token mas lago el cual seria menor o igual que en este caso. Nosotros necesitamos
Dialogue: 0,0:13:12.06,0:13:17.36,Default,,0,0,0,,asegurarnos antes de cantar victoria antes de tiempo y volver, menos que, cuando menos
Dialogue: 0,0:13:17.36,0:13:22.39,Default,,0,0,0,,que o igual, es intencionado por el programador. Una buena arquitectura para
Dialogue: 0,0:13:22.39,0:13:27.71,Default,,0,0,0,,construir un codigo de analisis lexico a partir de una expresion regual es empezar por
Dialogue: 0,0:13:27.71,0:13:34.62,Default,,0,0,0,,convertir cada expresion regual en un NFA epsilon. Cada uno de estos NFA epsilon
Dialogue: 0,0:13:34.62,0:13:39.31,Default,,0,0,0,,tiene su propio estado final con el que la accion para la expresion regular es
Dialogue: 0,0:13:39.31,0:13:46.36,Default,,0,0,0,,asociada. Nosotros combinamos todos esos NFAs epsilon para introducir un nuevo estado. El
Dialogue: 0,0:13:46.36,0:13:53.19,Default,,0,0,0,,estado inicial tiene transicion epsilon hacia los estados iniciales de cada NFA. Seria algo
Dialogue: 0,0:13:53.19,0:13:59.63,Default,,0,0,0,,como esto. Aqui esta el nuevo estado inicial. Aqui estan todos los estados iniciales viejos
Dialogue: 0,0:13:59.63,0:14:06.10,Default,,0,0,0,,y su automata. Y nosotros solo hemos puesto transiciones epsilon a cada uno de
Dialogue: 0,0:14:06.10,0:14:13.15,Default,,0,0,0,,ellos. Vale. Todos los estados finales del NFA permanecen finales y tienen sus
Dialogue: 0,0:14:13.15,0:14:20.03,Default,,0,0,0,,acciones asociadas. Asi que por ejemplo, estos son, estos son estados finales. Un NFA puede
Dialogue: 0,0:14:20.03,0:14:26.74,Default,,0,0,0,,tener diferentes estados finales. Despues de esta combinacion nosotros convertimos un DFA o
Dialogue: 0,0:14:26.74,0:14:31.51,Default,,0,0,0,,quizas un NFA sin transiciones epsilon que nosotros simularemos. Vale,
Dialogue: 0,0:14:31.51,0:14:36.39,Default,,0,0,0,,necesitamos dar expresiones regulares en orden y ese orden determina
Dialogue: 0,0:14:36.39,0:14:41.11,Default,,0,0,0,,la prioridad a traves de acciones. Un orden tipico pone todas las palabras reservadas
Dialogue: 0,0:14:41.11,0:14:46.08,Default,,0,0,0,,delante del identificador, de esta forma si el DFA descubre que si el siguiente token es "si",
Dialogue: 0,0:14:46.08,0:14:51.25,Default,,0,0,0,,este en principio no sabe si ejecutar la accion para la palabras reservada o
Dialogue: 0,0:14:51.25,0:14:55.73,Default,,0,0,0,,si para identificadores o para ambos. Pero el hecho de que "si" tenga prioridad sobre
Dialogue: 0,0:14:55.73,0:15:00.64,Default,,0,0,0,,identificadores dice que el token deberia ser tratado como una palabra reservada y no como
Dialogue: 0,0:15:00.64,0:15:05.79,Default,,0,0,0,,un identificador. Aunque para hacer todo este trabajo correctamente, la accion del DFA necesita una habilidad
Dialogue: 0,0:15:05.79,0:15:10.53,Default,,0,0,0,,especial. La habilidad de coger como entrada un simbolo que es leido y ponerlo al final de
Dialogue: 0,0:15:10.53,0:15:15.19,Default,,0,0,0,,en frente la corriente de entrada. Esta entrada será leida otra vez, normalmente la siguiente
Dialogue: 0,0:15:15.19,0:15:21.31,Default,,0,0,0,,vez que el analizador lexico es avisado para buscar el siguiente token. Aqui hay
Dialogue: 0,0:15:21.31,0:15:26.81,Default,,0,0,0,,un ejemplo de porque la habilidad de restaurar un simbolo de entrada de vuelta al frente
Dialogue: 0,0:15:26.81,0:15:31.98,Default,,0,0,0,,de la entrada es importante. Supin que el analizador lexico es avisado para encontrar
Dialogue: 0,0:15:31.98,0:15:36.83,Default,,0,0,0,,el siguiente token y el primer caracter que lee es la entrada del simbolo
Dialogue: 0,0:15:36.83,0:15:42.13,Default,,0,0,0,,menos que. El tiene que leer la siguiente entrada y si esta entrada es el simbolo igual entonces podemos
Dialogue: 0,0:15:42.13,0:15:48.31,Default,,0,0,0,,asegurar que el token es menos o igual que. Pero, si la entrada es cualquier otra cosa,
Dialogue: 0,0:15:48.31,0:15:53.68,Default,,0,0,0,,por ejemplo un espacio en blanco, una letra o un digito, entonces el caracter debe ser puesto atras
Dialogue: 0,0:15:53.68,0:16:00.04,Default,,0,0,0,,en la entrada como menos que, por si mismo, declarado como token. Otro ejemplo es
Dialogue: 0,0:16:00.04,0:16:06.22,Default,,0,0,0,,si el analizador lexico ha ledio el caracter "i" y "f" y esta en busqueda
Dialogue: 0,0:16:06.22,0:16:12.15,Default,,0,0,0,,de un token, el deberia haver visto la palabra reservada "si". Pero nosotros no sabremos hasta que no lea el 
Dialogue: 0,0:16:12.15,0:16:16.37,Default,,0,0,0,,siguiente caracter si este caracter es una letra o un digito, algo que pueda
Dialogue: 0,0:16:16.37,0:16:20.94,Default,,0,0,0,,extender el identificador, entonces nosotros no tenemos la palabra reservada "si", tenemos un identificador
Dialogue: 0,0:16:20.94,0:16:25.73,Default,,0,0,0,,mas largo. Aun asi, si el siguiente caracter no es uno que pueda extender el identificador
Dialogue: 0,0:16:25.73,0:16:30.24,Default,,0,0,0,,como un espacio en blanco o un parentesis, entonces tenemos realmente una palabra reservada
Dialogue: 0,0:16:30.24,0:16:34.87,Default,,0,0,0,,"si", en este caso" el siguiente caracteer debe ser empujado de nuevo al frente de la entrada.
