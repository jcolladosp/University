High-priority
-------------

Quick-and-dirty mode where we only discover schema equations and don't try to generalise them (like ?++(?++?) = (?++?)++?)

Look into constraining rewrite rules so that the constraint is l >= r instead of l > r? This would mean that irrelevant variable laws like f x -> f a would become unconditional. Might reduce amount of case splitting too.

Simplify size expressions a bit more (e.g.: take out common factors, make sure that constant is always >= 0 by flipping sign)

Make reducing-to-existing-term stuff more robust: whenever a term
simplifies to a term which we haven't generated, generate that term,
but only once we've come to the end of the current size.

Think about why we want to prefer equations with different schemas on
both sides. 1: simplification rules are nicer than random shuffling
about of stuff. 2: If we eliminate one equation because it reduces to
another, certain proofs may become harder. E.g. if the equation
reduces because of commutativity and we eliminate it, some proofs will
require commutativity that didn't before. Maybe then eliminating
schemas by simplifying using unorientable rules is something to avoid.

Look more into Moa's idea that any permutative law can be expressed as a permutative law over a single function (e.g. f x y = f y x)

Make it so that arbitrary instances are not compulsory

Make main QuickSpec module export sensible stuff and clean up code

Longer term
-----------

Allow the user to attach extra data to a constant.

Don't generate silly instances of schemas w/ commutative functions
Easy to avoid: just don't instantiate _+_ with two variables in the wrong order!
Any other commutativity-simplification will result in a different schema so already avoided
Exception: (e.g.) (_+_)+(_+_) - application of commutative function where both arguments have the same schema, but maybe we can deal with this later

Make timeouts a bit cleverer e.g. reduce test size
Instead of timeouts, allow the test evaluator to return a Maybe (if Nothing, throw out the test)

Make main loop understand conditions in some way or other

Generalise to other things than equalities

Instantiate schemas in a smarter way. Also, try to avoid having to
look explicitly for laws with totally different variables on both sides.
E.g., if we have f x y = g x z, then we should also find f x y = g x k,
where k is an arbitrary constant - if we don't find this then we don't
need to search for f x y = g x z.

Teach crappy pruner about commutativity-like (schema-preserving) laws.
Or improve pruning.

Regexes: use Brzozowski derivatives to get a useful specification?

Print out definitions

Add "ask why an equation is not printed".

Try optimising the set of test cases - e.g., after completing each size,
analyse the test set and find the "most effective" set of test cases,
then move it to the front.

Cleanup ideas
-------------

Introduce a type constructor ForAll whose effect is to normalise all variables in the term.

Maybe add a type wrapper for preserving the original type of a polymorphic value
(store as original value + type subst??)

Instead of conGeneralValue/regeneralise nonsense, have a type
constructor "Mono a" which wraps its argument while having its Typed
instance unify all types.

Change Symbolic typeclass so you have Symbolic Tm instead of Symbolic
(Tm f v) (and lose Symbolic instance for types), or monomorphise the entire
pruning infrastructure.

Stuff for HipSpec
-----------------

Incrementally add functions to the signature?
Incrementally increase size?
(Rule? - "consider this size".
 Needs a notion of quiescence/ordering maybe?)
Alternatively, implement everything just by restarting.
