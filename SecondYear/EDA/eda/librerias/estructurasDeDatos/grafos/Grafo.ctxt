#BlueJ class context
comment0.params=
comment0.target=int\ numVertices()
comment0.text=\ Devuelve\ el\ numero\ de\ vertices\ del\ grafo\n\ @return\ int\ numero\ de\ vertices\ del\ grafo\n
comment1.params=
comment1.target=int\ numAristas()
comment1.text=\ Devuelve\ el\ numero\ de\ aristas\ del\ grafo\n\ @return\ int\ numero\ de\ aristas\ del\ grafo\n
comment10.params=origen\ destino
comment10.target=librerias.estructurasDeDatos.modelos.ListaConPI\ caminoMinimo(int,\ int)
comment10.text=\ Devuelve\ decodificado\ en\ una\ Lista\ Con\ PI\ el\ camino\ minimo\ con\ pesos\n\ entre\ los\ vertices\ origen\ y\ destino\ de\ un\ grafo.\n\ @param\ origen\ \ V\u00E9rtice\ origen\ del\ camino\ a\ decodificar\n\ @param\ destino\ V\u00E9rtice\ destino\ del\ camino\ a\ decodificar\n\ @return\ ListaConPI<Integer>\ con\ los\ vertices\ que\ componen\ el\ camino\n\ minimo\ entre\ origen\ y\ destino\n
comment11.params=v
comment11.target=int\ masLejosDe(int)
comment11.text=Precondicion\:\ 0\ <\=\ v\ <\ numVertices()
comment2.params=i\ j
comment2.target=boolean\ existeArista(int,\ int)
comment2.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @return\ boolean\ true\ si\ (i,j)\ est\uFFFD\ en\ el\ grafo\ y\ false\ en\ caso\ contrario\n
comment3.params=i\ j
comment3.target=double\ pesoArista(int,\ int)
comment3.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ 0\ si\ dicha\ arista\n\ no\ esta\ en\ el\ grafo.\n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @return\ double\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\n
comment4.params=i\ j
comment4.target=void\ insertarArista(int,\ int)
comment4.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ no\ Ponderado.\n\ \ @param\ i\ \ \ \ Vertice\ origen\n\ \ @param\ j\ \ \ \ Vertice\ destino\n
comment5.params=i\ j\ p
comment5.target=void\ insertarArista(int,\ int,\ double)
comment5.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado.\n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @param\ p\ \ \ \ Peso\ de\ la\ arista\ (i,j)\n
comment6.params=i
comment6.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment6.text=\ Devuelve\ una\ ListaConPI\ que\ contiene\ los\ adyacentes\ al\ vertice\ i\n\ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\n\ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\ Devuelve\ un\ String\ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\n\ \ adyacentes,\ en\ orden\ de\ insercion\n\ @return\ \ String\ que\ representa\ a\ un\ grafo\n
comment8.params=origen
comment8.target=void\ dijkstra(int)
comment8.text=\ Establece\ los\ caminos\ minimos\ con\ pesos\ desde\ el\ vertice\ origen\ a\n\ todos\ los\ restantes.\n\ @param\ \ origen,\ vertice\ origen\ de\ los\ caminos\ minimos\n\ @return\ void,\ los\ caminos\ minimos\ y\ sus\ longitudes\ se\ guardan\n\ codificados\ en\ los\ arrays\ caminoMin\ y\ distanciaMin,\ respectivamente\n
comment9.params=origen\ destino
comment9.target=double\ distanciaMinima(int,\ int)
comment9.text=Devuelve\ la\ distancia\ minima\ entre\ los\ vertices\ origen\ y\ destino\n\ @param\ origen\ \ Vertice\ origen\n\ @param\ destino\ Vertice\ destino\n\ @return\ Distancia\ minima\ desde\ origen\ hasta\ destino\n
numComments=12
